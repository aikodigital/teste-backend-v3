// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TheatricalPlayersRefactoringKata.Infra.Data.Context;

#nullable disable

namespace TheatricalPlayersRefactoringKata.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Audience");

                    b.HasKey("Id");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Audience")
                        .HasColumnType("integer")
                        .HasColumnName("Audience");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PlayId");

                    b.ToTable("Performance", (string)null);
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Play", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Lines")
                        .HasColumnType("integer")
                        .HasColumnName("Lines");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<int>("TypeGenreId")
                        .HasColumnType("integer")
                        .HasColumnName("TypeGenreId");

                    b.HasKey("Id");

                    b.HasIndex("TypeGenreId");

                    b.ToTable("Play", (string)null);
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.TypeGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseFeePerAudience")
                        .HasColumnType("integer")
                        .HasColumnName("BaseFeePerAudience");

                    b.Property<int>("BasePriceMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("BasePriceMultiplier");

                    b.Property<int?>("BonusFee")
                        .HasColumnType("integer")
                        .HasColumnName("BonusFee");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ExtraFeePerAudience")
                        .HasColumnType("integer")
                        .HasColumnName("ExtraFeePerAudience");

                    b.Property<int?>("MaxAudience")
                        .HasColumnType("integer")
                        .HasColumnName("MaxAudience");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TypeGenre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePriceMultiplier = 10,
                            CreatedAt = new DateTime(2024, 9, 26, 13, 35, 46, 775, DateTimeKind.Local).AddTicks(6048),
                            ExtraFeePerAudience = 1000,
                            MaxAudience = 30,
                            Name = "tragedy"
                        },
                        new
                        {
                            Id = 2,
                            BaseFeePerAudience = 300,
                            BasePriceMultiplier = 10,
                            BonusFee = 10000,
                            CreatedAt = new DateTime(2024, 9, 26, 13, 35, 46, 775, DateTimeKind.Local).AddTicks(6064),
                            ExtraFeePerAudience = 500,
                            MaxAudience = 20,
                            Name = "comedy"
                        },
                        new
                        {
                            Id = 3,
                            BasePriceMultiplier = 10,
                            CreatedAt = new DateTime(2024, 9, 26, 13, 35, 46, 775, DateTimeKind.Local).AddTicks(6066),
                            Name = "history"
                        });
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Performance", b =>
                {
                    b.HasOne("TheatricalPlayersRefactoringKata.Domain.Entities.Invoice", null)
                        .WithMany("Performances")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("TheatricalPlayersRefactoringKata.Domain.Entities.Play", "Play")
                        .WithMany("Performances")
                        .HasForeignKey("PlayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Play");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Play", b =>
                {
                    b.HasOne("TheatricalPlayersRefactoringKata.Domain.Entities.TypeGenre", "TypeGenre")
                        .WithMany("Plays")
                        .HasForeignKey("TypeGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeGenre");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.Play", b =>
                {
                    b.Navigation("Performances");
                });

            modelBuilder.Entity("TheatricalPlayersRefactoringKata.Domain.Entities.TypeGenre", b =>
                {
                    b.Navigation("Plays");
                });
#pragma warning restore 612, 618
        }
    }
}
